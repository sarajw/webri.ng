service: webri-ng
frameworkVersion: '2 || 3'

provider:
  name: aws
  profile: webring
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  stage: dev
  region: ap-southeast-2
  iam:
    role: LambdaExecutionRole
  environment:
    DB_USER: ${self:custom.database.username}
    DB_PASS: ${self:custom.database.password}
    DB_HOST: ${self:custom.database.host}
    DB_PORT: ${self:custom.database.port}
    DB_NAME: ${self:custom.database.name}
    DB_SCHEMA: ${self:custom.database.schema}

custom:
  database:
    host:
      Fn::GetAtt: [MainDatabase, Endpoint.Address]
    port:
      Fn::GetAtt: [MainDatabase, Endpoint.Port]
    username: webmaster
    password: webpassword
    name: webring_${self:provider.stage}
    schema: webring

plugins:
  - serverless-offline
  - serverless-plugin-typescript

package:
  patterns:
    - template/**

functions:
  register:
    handler: api/user/register.registerHandler
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [LambdaSecurityGroup, GroupId]
      subnetIds:
        - Ref: PublicSubnet
    events:
      - httpApi:
          path: /user/register
          method: post

  test:
    handler: api/test.testHandler
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [LambdaSecurityGroup, GroupId]
      subnetIds:
        - Ref: PublicSubnet
    events:
      - httpApi:
          path: /test
          method: get

resources:
  Resources:
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
          Version: '2012-10-17'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: CanLog
            PolicyDocument:
              Version: '2012-10-17'
              Statement: 
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource: '*'

    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags: 
          - 
            Key: "Name"
            Value: "VPC"

    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Lambda security group
        VpcId: 
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIp: "0.0.0.0/0"

    #############################################
    # Bastion infrastructure.
    #############################################
    PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        VpcId:  
          Ref: VPC
        CidrBlock: 10.0.3.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value:
              Ref: AWS::StackName
          - Key: AZ
            Value: !Select [0, !GetAZs '']

    BastionInstance:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: t4g.nano
        ImageId: ami-09baacb649042c57a
        KeyName: bastion_access
        SubnetId: 
          Ref: PublicSubnet
        SecurityGroupIds:
          - Ref: BastionSecurityGroup
        Tags:
          - Key: Name
            Value: 'BastionInstance'

    BastionSecurityGroup:
      DependsOn: 
        - VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: 'Security group for bastion host'
        VpcId: 
          Ref: VPC
        # Allow SSH ingress.
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: "0.0.0.0/0"

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: 
              Ref: AWS::StackName

    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: 
          Ref: InternetGateway
        VpcId: 
          Ref: VPC

    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: 
          Ref: VPC
        Tags:
          - Key: Name
            Value: 
              Ref: AWS::StackName

    InternetRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: 
          Ref: RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: 
          Ref: InternetGateway

    # https://serverfault.com/questions/938237/cant-ssh-into-aws-cloudformation-stack-instance/938254#938254?newreg=d7f6698232144c41be651e7a4d357817
    BastionRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: 
          Ref: RouteTable
        SubnetId: 
          Ref: PublicSubnet

    #############################################
    # Database infrastructure.
    #############################################

    MainDatabaseSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Database security group
        VpcId: 
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            SourceSecurityGroupId: 
              Ref: BastionSecurityGroup
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            SourceSecurityGroupId: 
              Ref: LambdaSecurityGroup


    MainDatabaseSubnetA:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.0.0/24
        Tags: 
          - 
            Key: "Name"
            Value: "MainDatabaseSubnetA"

    MainDatabaseSubnetB:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.1.0/24
        Tags: 
          - 
            Key: "Name"
            Value: "MainDatabaseSubnetB"

    MainDatabaseSubnetC:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: 10.0.2.0/24
        Tags: 
          - 
            Key: "Name"
            Value: "MainDatabaseSubnetC"

    MainDatabaseSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Main Database Subnet Group"
        SubnetIds:
          - Ref: MainDatabaseSubnetA
          - Ref: MainDatabaseSubnetB
          - Ref: MainDatabaseSubnetC
        Tags: 
          - 
            Key: "Name"
            Value: "MainDatabaseSubnetGroup"

    MainDatabase:
      Type: AWS::RDS::DBInstance
      Properties:
        MasterUsername: ${self:custom.database.username}
        MasterUserPassword: ${self:custom.database.password}
        AllocatedStorage: 20
        DBName: ${self:custom.database.name}
        DBInstanceClass: db.t4g.micro
        VPCSecurityGroups:
        - !GetAtt MainDatabaseSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: MainDatabaseSubnetGroup
        Engine: postgres
